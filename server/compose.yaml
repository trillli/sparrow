# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    command: sh -c "python manage.py makemigrations daybreakr_data && python manage.py migrate && python manage.py runserver 0.0.0.0:6060"
    ports:
      - 6060:6060

# # The commented out section below is an example of how to define a PostgreSQL
# # database that your application can use. `depends_on` tells Docker Compose to
# # start the database before your application. The `db-data` volume persists the
# # database data between container restarts. The `db-password` secret is used
# # to set the database password. You must create `db/password.txt` and add
# # a password of your choosing to it before running `docker compose up`.
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    restart: always
    user: postgres
    # environment:
    #   - POSTGRES_DB=db_daybreakr
    #   - POSTGRES_USER=postgres
    #   - POSTGRES_PASSWORD=postgres
    # secrets:
    #   - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=db_daybreakr
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    expose:
      - 127.0.0.1:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
# secrets:
#   db-password:
#     file: db/password.txt


# version: "3.9"

# services:
#   djangoapp:
#     container_name: djangoapp
#     build: .
#     ports:
#       - "8000:8000"
#     environment:
#       - PG_USER=postgres
#       - PG_PASSWORD=postgres
#       - PG_DB=db_daybreakr
#       - PG_PORT=5432
#       - PG_HOST=db
#     depends_on:
#       - db

#   db:
#     container_name: db
#     image: postgres:12
#     environment:
#       - POSTGRES_DB=db_daybreakr
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#     ports:
#       - "5432:5432"
#     volumes:
#       - pgdata:/var/lib/postgresql/data

# volumes:
#   pgdata: {}

